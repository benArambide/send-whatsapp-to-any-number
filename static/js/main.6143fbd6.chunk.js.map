{"version":3,"sources":["componets/PhoneInput.js","componets/MessageSender.js","componets/HowItWorks.js","componets/Page.js","App.js","serviceWorker.js","index.js","whatsapp-link-logo--full.svg","vm-thumb-android-4.png"],"names":["PhoneInput","phoneChanged","mapIndexed","addIndex","map","useState","number","setNumber","code","setCode","countriesInfo","pipe","c","index","value","head","countryCallingCodes","label","name","key","reject","isNil","countries","all","onChangePhone","phone","Group","compact","className","defaultValue","size","options","onChange","codeE","showSearch","optionFilterProp","e","target","test","MessageSender","link","setLink","apiLink","isMobile","type","onClick","window","location","replace","HowItWorks","Page","src","WpImg","alt","href","MobileWp","App","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","module","exports"],"mappings":"iWAmDeA,EA7CI,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,aACbC,EAAaC,YAASC,KADS,EAETC,mBAAS,IAFA,mBAE9BC,EAF8B,KAEtBC,EAFsB,OAGbF,mBALN,OAEmB,mBAG9BG,EAH8B,KAGxBC,EAHwB,KAK/BC,EAAgBC,YACpBT,GAAW,SAACU,EAAGC,GAAJ,MAAe,CAACC,MAAOC,YAAKH,EAAEI,qBAAsBC,MAAM,GAAD,OAAKL,EAAEM,KAAP,YAAeH,YAAKH,EAAEI,sBAAwBG,IAAKN,MACvHO,aAAO,SAACR,GAAD,OAAOS,YAAMT,EAAEE,UAFFH,CAGpBW,YAAUC,KAENC,EAAgB,SAAChB,EAAMiB,GAC3BxB,EAAa,GAAD,OAAIO,GAAJ,OAAWiB,KAgBzB,OACE,6BACE,kBAAC,IAAMC,MAAP,CAAaC,SAAO,EAACC,UAAU,yBAC7B,yBAAKA,UAAU,SACb,kBAAC,IAAD,CAAQC,aAjCE,MAiCyBC,KAAK,QAAQF,UAAU,SAASG,QAASrB,EAC1EsB,SAVe,SAAAC,GACvBxB,EAAQwB,GACRT,EAAcS,EAAO3B,IASb4B,YAAU,EACVC,iBAAiB,WAGrB,yBAAKP,UAAU,SACb,kBAAC,IAAD,CAAOC,aAAa,GAAGC,KAAK,QAAQE,SAxBjB,SAAAI,GAAM,IACvBtB,EAAUsB,EAAEC,OAAZvB,OACJ,QAAQwB,KAAKxB,IAAoB,KAAVA,KACzBP,EAAUO,GACVU,EAAchB,EAAMM,KAoBkDA,MAAOR,Q,yBCjBpEiC,EAtBO,SAAC,GAAmB,IAAjBX,EAAgB,EAAhBA,UAAgB,EACfvB,mBAAS,IADM,mBAChCmC,EADgC,KAC1BC,EAD0B,KAYvC,OACE,yBAAKb,UAAS,UAAKA,IACjB,yBAAKA,UAAU,QACb,kBAAC,EAAD,CAAY3B,aAZI,SAAAwB,GACpB,IAAMiB,EAAUC,MAAQ,gCAA8BlB,GAA9B,8CAA8EA,GACtGgB,EAAQC,OAYN,kBAAC,IAAD,CAAQE,KAAK,UAAUhB,UAAS,qBAAwBE,KAAK,QAAQe,QATpD,WACnBC,OAAOC,SAASC,QAAQR,KAQtB,yBCZSS,EATI,SAAC,GAAmB,IAAjBrB,EAAgB,EAAhBA,UACpB,OACE,yBAAKA,UAAS,UAAKA,IACjB,wBAAIA,UAAU,8BAAd,yBACA,mQ,kCCqBSsB,EApBF,WACX,OACE,yBAAKtB,UAAU,oDACb,yBAAKA,UAAU,8EACb,yBAAKA,UAAU,kBACb,wBAAIA,UAAU,wDAAd,sFACA,yBAAKuB,IAAKC,IAAOC,IAAI,GAAGzB,UAAU,2BAClC,kBAAC,EAAD,CAAeA,UAAU,cACzB,kBAAC,EAAD,MAEA,uBAAGA,UAAU,qBAAb,cAA4C,uBAAG0B,KAAK,gCAAgC1B,UAAU,gBAAgBS,OAAO,UAAzE,qBAGhD,yBAAKT,UAAU,oDACb,yBAAKuB,IAAKI,IAAUF,IAAI,GAAGzB,UAAS,qB,OCN7B4B,MARf,WACE,OACE,yBAAK5B,UAAU,OACb,kBAAC,EAAD,QCGc6B,QACW,cAA7BX,OAAOC,SAASW,UAEe,UAA7BZ,OAAOC,SAASW,UAEhBZ,OAAOC,SAASW,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a,wCEzI5BC,EAAOC,QAAU,IAA0B,sD,mBCA3CD,EAAOC,QAAU,IAA0B,iD","file":"static/js/main.6143fbd6.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport { Input, Select } from 'antd'\r\nimport { countries } from 'country-data'\r\nimport { map, head, pipe, reject, isNil, addIndex } from 'ramda'\r\nconst defaultCode = '+51';\r\n\r\nconst PhoneInput = ({phoneChanged}) => {\r\n  const mapIndexed = addIndex(map);\r\n  const [number, setNumber] = useState('');\r\n  const [code, setCode] = useState(defaultCode);\r\n\r\n  const countriesInfo = pipe(\r\n    mapIndexed((c, index) => ({value: head(c.countryCallingCodes), label: `${c.name} ${head(c.countryCallingCodes)}`, key: index })),\r\n    reject((c) => isNil(c.value))\r\n  )(countries.all);\r\n\r\n  const onChangePhone = (code, phone) => {\r\n    phoneChanged(`${code}${phone}`);\r\n  };\r\n\r\n  const handleNumberChange = e => {\r\n    const { value } = e.target;\r\n    if (/^\\d+$/.test(value) || value === '') {\r\n      setNumber(value)\r\n      onChangePhone(code, value);\r\n    }\r\n  };\r\n\r\n  const handleCodeChange = codeE => {\r\n    setCode(codeE);\r\n    onChangePhone(codeE, number);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Input.Group compact className=\"w-full flex flex-wrap\">\r\n        <div className=\"w-1/3\">\r\n          <Select defaultValue={defaultCode} size=\"large\" className=\"w-full\" options={countriesInfo}\r\n            onChange={handleCodeChange}\r\n            showSearch\r\n            optionFilterProp=\"label\"\r\n          />\r\n        </div>\r\n        <div className=\"w-2/3\" >\r\n          <Input defaultValue=\"\" size=\"large\" onChange={handleNumberChange} value={number} />\r\n        </div>\r\n      </Input.Group>\r\n    </div>\r\n  )\r\n};\r\n\r\nexport default PhoneInput;\r\n","import React, { useState } from 'react'\r\nimport PhoneInput from './PhoneInput'\r\nimport { Button } from 'antd'\r\nimport isMobile from 'is-mobile'\r\n\r\nconst MessageSender = ({ className }) => {\r\n  const [link, setLink] = useState('')\r\n\r\n  const onChangePhone = phone => {\r\n    const apiLink = isMobile() ? `whatsapp://send?phone=${phone}` :`https://api.whatsapp.com/send?phone=${phone}`;\r\n    setLink(apiLink);\r\n  };\r\n\r\n  const generateLink = () => {\r\n    window.location.replace(link);\r\n  };\r\n\r\n  return (\r\n    <div className={`${className}`}>\r\n      <div className=\"mb-4\">\r\n        <PhoneInput phoneChanged={onChangePhone} />\r\n      </div>\r\n      <Button type=\"primary\" className={`w-full main-button`} size=\"large\" onClick={generateLink}>Escribir un Mensaje</Button>\r\n    </div>\r\n  )\r\n};\r\n\r\nexport default MessageSender;\r\n","import React from 'react'\r\nconst HowItWorks = ({ className }) => {\r\n  return (\r\n    <div className={`${className}`}>\r\n      <h3 className=\"font-semibold text-xl mb-2\">¿Cómo funciona?</h3>\r\n      <p>Sólo seleccionar el código de país, ingresa el número celular, y dale a \"Escribir Mensaje\", automaticamente se abrirá Whatsapp listo para enviar el mensaje sin la necesidad de agregar el número como contacto.</p>\r\n    </div>\r\n  )\r\n};\r\n\r\nexport default HowItWorks;\r\n","import React from 'react'\r\nimport MessageSender from './MessageSender'\r\nimport HowItWorks from './HowItWorks'\r\nimport WpImg from '../whatsapp-link-logo--full.svg'\r\nimport MobileWp from '../vm-thumb-android-4.png'\r\n\r\nconst Page = () => {\r\n  return (\r\n    <div className=\"flex flex-wrap min-h-screen main-bg pt-8 md:pt-0\">\r\n      <div className=\"w-full md:w-1/2 flex justify-center items-center container md:container-xl\">\r\n        <div className=\"w-5/6 md:w-2/3\">\r\n          <h1 className=\"text-4xl leading-none mb-10 font-semibold main-title\">Envía mensajes por Whatsapp sin necesidad de agregar el número como contacto</h1>\r\n          <img src={WpImg} alt=\"\" className=\"w-2/3 mb-4 text-center\" />\r\n          <MessageSender className=\"mb-8 mt-6\" />\r\n          <HowItWorks />\r\n          {/* eslint-disable-next-line react/jsx-no-target-blank */}\r\n          <p className=\"text-xs mt-4 mb-4\">Written by <a href=\"https://github.com/josueaqp92\" className=\"text-blue-600\" target=\"_blank\">Josue Arambide</a></p>\r\n        </div>\r\n      </div>\r\n      <div className=\"w-full md:w-1/2 flex justify-center items-center\">\r\n        <img src={MobileWp} alt=\"\" className={`mx-auto w-1/2`} />\r\n      </div>\r\n    </div>\r\n  )\r\n};\r\n\r\nexport default Page;\r\n","import React from 'react';\nimport 'antd/dist/antd.css';\nimport Page from './componets/Page'\nimport './tailwind.min.css'\nimport './index.css'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Page />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/whatsapp-link-logo--full.4d3d94d1.svg\";","module.exports = __webpack_public_path__ + \"static/media/vm-thumb-android-4.b544a337.png\";"],"sourceRoot":""}